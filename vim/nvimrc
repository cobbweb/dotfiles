call plug#begin('~/.local/share/nvim/plugged')

  " Misc
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-abolish'

  " Git
  Plug 'tpope/vim-fugitive'

  " Navigation
  " Plug 'unblevable/quick-scope'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'yuttie/comfortable-motion.vim'
  Plug 'easymotion/vim-easymotion'
    " Gif config
    map  / <Plug>(easymotion-sn)
    omap / <Plug>(easymotion-tn)

    " These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
    " Without these mappings, `n` & `N` works fine. (These mappings just provide
    " different highlight method and have some other features )
    map  n <Plug>(easymotion-next)
    map  N <Plug>(easymotion-prev)


  " FZF
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
    " Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always --glob "!.git/*"'.shellescape(<q-args>), 1,
      \   <bang>0 ? fzf#vim#with_preview('up:60%')
      \           : fzf#vim#with_preview('right:50%:hidden', '?'),
      \   <bang>0)


    " Command for git grep
    " - fzf#vim#grep(command, with_column, [options], [fullscreen])
    command! -bang -nargs=* GGrep
      \ call fzf#vim#grep('git grep --line-number '.shellescape(<q-args>), 0, <bang>0)


  " Airline
  Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    let g:airline#extensions#tabline#enabled = 1
    " let g:airline_powerline_fonts = 1
    " let g:airline_theme='dracula'
    " let g:airline_theme='quantum'

  " " File exploring
  Plug 'scrooloose/nerdtree'
  Plug 'jistr/vim-nerdtree-tabs'

  " UI
  Plug 'airblade/vim-gitgutter'
    " disable default <leader>h mappings
    let g:gitgutter_map_keys = 0

  Plug 'junegunn/vim-peekaboo'
  Plug 'edkolev/tmuxline.vim'

  " Style
  Plug 'dracula/vim'
  " Plug 'joshdick/onedark.vim'
  " Plug 'KeitaNakamura/neodark.vim'
  " Plug 'tyrannicaltoucan/vim-quantum'
  Plug 'nathanaelkane/vim-indent-guides'

  " Language features
  " Plug 'Shougo/deoplete.nvim'
  "   let g:deoplete#enable_at_startup = 1
    " let g:deoplete#omni#functions = {}
    " let g:deoplete#sources = {}
    " let g:deoplete#sources._ = ['file', 'neosnippet']
    " let g:deoplete#omni#input_patterns = {}

  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'jiangmiao/auto-pairs'
  Plug 'junegunn/rainbow_parentheses.vim'
  Plug 'ntpeters/vim-better-whitespace'
    autocmd VimEnter * EnableStripWhitespaceOnSave

  " Plug 'prettier/vim-prettier', {
  "   \ 'do': 'yarn install',
  "   \ 'for': ['javascript', 'typescript'] }
  "   let g:prettier#autoformat = 0
  "   autocmd BufWritePre *.js,*.ts,*.tsx,*.jsx PrettierAsync
  Plug 'sbdchd/neoformat'
    let g:neoformat_enabled_javascript = ['prettier']
    let g:neoformat_enabled_typescript = ['prettier']
"    let g:neoformat_enabled_css = ['prettier']
    autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx Neoformat prettier

  " Plug 'w0rp/ale', { 'on': ['ALEEnable', 'ALEToggle'] }

  " Languages
  Plug 'sheerun/vim-polyglot'
    let g:polyglot_disabled = ['elm']

  " JAVASCRIPT
  " Base lang support from vim-polyglot
"  Plug 'mxw/vim-jsx'
  " Plug 'mhartington/nvim-typescript'
  " Plug 'carlitux/deoplete-ternjs'
  " Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
  "   autocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>
  "   let g:tern#filetypes = [
  "               \ 'jsx',
  "               \ 'javascript.jsx',
  "               \ 'javascript',
  "               \ ]

  Plug 'alx741/vim-hindent'
  Plug 'mattn/emmet-vim'

  " Elm
  " Plug 'pbogut/deoplete-elm', { 'for': 'elm' }
  Plug 'ElmCast/elm-vim', { 'for': 'elm' }
    let g:elm_format_autosave = 1
    let g:elm_detailed_complete = 1
    let g:elm_syntastic_show_warnings = 1
    let g:elm_setup_keybindings = 0
    autocmd FileType elm set tabstop=4 softtabstop=4 shiftwidth=4
    " let g:elm_format_fail_silently = 1
    " let g:elm_browser_command = 'open'
    " let g:elm_make_show_warnings = 1
    " let g:deoplete#omni#functions.elm = ['elm#Complete']
    " let g:deoplete#omni#input_patterns.elm = '[^ \t]+'
    " let g:deoplete#sources.elm = ['omni'] + g:deoplete#sources._

  " Run last, as per devicons README
  Plug 'ryanoasis/vim-devicons'
    let g:airline_powerline_fonts = 1

call plug#end()



" Settings
let mapleader="\<DEL>"
set encoding=utf8
set whichwrap+=<,>,[,]
set colorcolumn=80
set expandtab
set shiftwidth=2
set softtabstop=2
set hidden

" Mouse
set mouse=a

" Python monkey business
let g:python_host_prog = '/home/cobbweb/.pyenv/versions/neovim2/bin/python'
let g:python3_host_prog = '/home/cobbweb/.pyenv/versions/neovim3/bin/python'

" EDITING UI AND HIGHLIGHTING
" set termguicolors

color dracula
set background=dark
set number
set relativenumber
set cursorline
" set guicursor=n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20
set guifont=FuraCode\ Nerd\ Font\ Medium:h14


" Split tricks
set splitbelow
set splitright


" JAVASCRIPT

" Code completion settings
" deoplete tab-complete
" inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" tern

" Cool conceal
"let g:javascript_conceal_null = "Ã¸"
"let g:javascript_conceal_static = "@"
" let g:javascript_conceal_this = "@"

" Syntax highlighting tweaks
autocmd FileType javascript,javascript.jsx syntax match   jsFauxConstant "\<[A-Z0-9_\$]\+\>"
autocmd FileType javascript,javascript.jsx syntax cluster jsImportContainer    add=jsFauxConstant
autocmd FileType javascript,javascript.jsx syntax cluster jsDestructuringBlock add=jsFauxConstant
autocmd FileType javascript,javascript.jsx syntax cluster jsExpression         add=jsFauxConstant
autocmd FileType javascript,javascript.jsx syntax cluster jsDestructuringBlock add=jsFauxConstant

highlight link jsFuncCall Function
highlight link jsFauxConstant Boolean

" Auto Semi-colon & comma
nnoremap <leader>; me:call ToggleEndChar(';')<cr>`e
nnoremap <leader>, me:call ToggleEndChar(',')<cr>`e
"inoremap <leader>; <Esc>me:call ToggleEndChar(';')<cr>`ea
"inoremap <leader>, <Esc>me:call ToggleEndChar(',')<cr>`ea

function! ToggleEndChar(charToMatch)
    s/\v(.)$/\=submatch(1)==a:charToMatch ? '' : submatch(1).a:charToMatch
endfunction

" Function prevent FZF opening files in NERDTree's sidebar buffer
function! OpenFile(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    exe "normal! \<c-w>\<c-w>"
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction

" File ignores
set wildignore+=.git,.svn
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.sw?
set wildignore+=.DS_Store
set wildignore+=node_modules,bower_components,elm-stuff

" Ignore delete key in normal mode (used as leader), prefer x
nnoremap <del> <nop>

" GUI
set laststatus=2 " fix vssim-airline not showing

" Bindings
nnoremap <leader>t :NERDTreeTabsToggle<cr>

" Fuzzy open files
noremap <leader>p :call OpenFile(':Files')<cr>

" Saving, closing and quiting
"inoremap <leader>s <Esc>:w<cr>
nnoremap <leader>s :w<cr>
"inoremap <leader>q <Esc>:q<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>Q :q!<cr>
nnoremap <leader>w :bp<bar>sp<bar>bn<bar>bd<CR><cr>
nnoremap <leader>w :bp<bar>sp<bar>bn<bar>bd!<CR><cr>

" Clear current highlighting
nnoremap <leader><esc> :noh<cr>

" Pane navigation
" map <C-j> <C-W>j
" map <C-k> <C-W>k
" map <C-h> <C-W>h
" map <C-l> <C-W>l

" Buffer switching
noremap <silent> <leader>a :bprevious<cr>
noremap <silent> <leader>l :bnext<cr>

" Finding lines of code
nnoremap <silent> <leader>ff :call OpenFile(':Lines')<cr>
nnoremap <silent> <leader>fp :call OpenFile(':GGrep')<cr>

" Exiting insert mode hacks
"inoremap jw <Esc>
"inoremap wj <Esc>

" Git Gutter
noremap <leader>ghs :GitGutterStageHunk<cr>
noremap <leader>ghu :GitGutterUndoHunk<cr>
noremap <leader>ghv :GitGutterPreviewHunk<cr>
noremap <leader>ghn :GitGutterNextHunk<cr>
noremap <leader>ghp :GitGutterPrevHunk<cr>

" Maintain indent in normal mode
inoremap <CR> <CR>x<BS>
nnoremap o ox<BS>
nnoremap O Ox<BS>

color dracula
